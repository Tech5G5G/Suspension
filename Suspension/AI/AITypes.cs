namespace Suspension.AI;

/// <summary>
/// Represents a prompt(s) sent to the <see cref="Model.TryMakeRequest(AIRequest)"/> method.
/// </summary>
/// <param name="Prompts">Gets or inits an array of prompts to send to a <see cref="Model"/>.</param>
public record AIRequest(string[] Prompts);

/// <summary>
/// Represents a response from the <see cref="Model.TryMakeRequest(AIRequest)"/> method.
/// </summary>
/// <param name="Candidates">Gets an array of <see cref="Candidate"/>, representing the various content a <see cref="Model"/> generated.</param>
/// <param name="Id">Gets the ID of the response.</param>
/// <param name="Metadata">Gets the <see cref="UsageMetadata"/> of the response.</param>
public record AIResponse(Candidate[] Candidates, string Id, UsageMetadata Metadata)
{
    /// <summary>
    /// Converts the <see cref="AIResponse"/> into a <see cref="string"/>.
    /// </summary>
    /// <returns>A <see cref="string"/> that joins the <see cref="Candidate.Content"/> of <see cref="Candidates"/>.</returns>
    public override string ToString() => string.Join('\n', Candidates.Select(i => i.Content));
}

/// <summary>
/// Represents the content generated by a <see cref="Model"/>.
/// </summary>
/// <param name="Content">Gets a <see cref="string"/> representation of the content.</param>
/// <param name="FinishReason">Gets the reason why the <see cref="Model"/> finished generating the <see cref="Content"/>.</param>
public record Candidate(string Content, string FinishReason);

/// <summary>
/// Represents the usage metadata of an <see cref="AIResponse"/>.
/// </summary>
/// <param name="PromptTokenCount">Gets the amount of tokens used by the prompt(s).</param>
/// <param name="CandidatesTokenCount">Gets the amount of tokens used by the <see cref="Candidate"/>s.</param>
/// <param name="TotalTokenCount">Gets the total of <see cref="PromptTokenCount"/> and <see cref="CandidatesTokenCount"/>.</param>
/// <param name="PromptTokensDetails">Gets an array of <see cref="AI.PromptTokensDetails"/>, representing the token details of each prompt.</param>
public record UsageMetadata(
    int PromptTokenCount,
    int CandidatesTokenCount,
    int TotalTokenCount,
    PromptTokensDetails[] PromptTokensDetails);

/// <summary>
/// Represents the token details of each prompt sent to a <see cref="Model"/>.
/// </summary>
/// <param name="Modality">Gets the modality of the prompt.</param>
/// <param name="TokenCount">Gets the amount of tokens used by the prompt.</param>
public record PromptTokensDetails(string Modality, int TokenCount);
